unit UMetodosServer;

interface

uses
  System.SysUtils, System.Classes, ClientClassesPrincipal,System.NetEncoding,ubasica,
  udmConect,
  {$IFDEF ANDROID}
  System.IOUtils,
  {$ENDIF ANDROID}

  Datasnap.DSClientRest, System.IniFiles;

type
  clsMetodosServer = class
  private
    DSRestConnection1: TDSRestConnection;
    FInstanceOwner: Boolean;
    FServerMethodsPrincipalClient: TServerMethodsPrincipalClient;

    function GetServerMethodsPrincipalClient: TServerMethodsPrincipalClient;

    { Private declarations }
  public
    fCaminhoINI : String;

    constructor Create(AOwner: TComponent);
    destructor Destroy; override;
    procedure Configurar;
    procedure ConfigurarPedido;
    procedure ConfigurarPedido_Cont;

    function TestarConnect(var ErrorMsg: String): Boolean;
    function RetornarConexao: String;

    property InstanceOwner: Boolean read FInstanceOwner write FInstanceOwner;
    property ServerMethodsPrincipalClient: TServerMethodsPrincipalClient read GetServerMethodsPrincipalClient write FServerMethodsPrincipalClient;
    property CaminhoINI           : String   read fCaminhoINI            write fCaminhoINI;

end;

implementation

procedure clsMetodosServer.Configurar;
var
  ArquivoINI: TIniFile;
begin
  try
    if FileExists(fCaminhoINI + 'UniWEB.ini') then
    begin
      ArquivoINI := TIniFile.Create(fCaminhoINI + 'UniWEB.ini');
      DSRestConnection1.Host := TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','HOST','')));
      DSRestConnection1.Port := clsBasica.ConverterStrToInt(TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','PORT',''))));
      DSRestConnection1.Username := 'forcauniversal';
      DSRestConnection1.Password := 'univ#2021';
      {$IFDEF DEBUG}
        DSRestConnection1.Port := 8085;
      {$ENDIF DEBUG}
      //  Maquina Maranho
      //     DSRestConnection1.Host := '172.16.1.35';
      //     DSRestConnection1.Port := 8080;
    end;
  except
    on e: exception do begin
      raise Exception.Create('Erro ao configurar: ' + e.Message);
    end;
  end;
end;

procedure clsMetodosServer.ConfigurarPedido;
var
  ArquivoINI: TIniFile;
begin
  try
    if FileExists(fCaminhoINI + 'UniWEB.ini') then
    begin
      ArquivoINI := TIniFile.Create(fCaminhoINI + 'UniWEB.ini');
      DSRestConnection1.Host := TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','HOSTPEDIDO','')));
      DSRestConnection1.Port := clsBasica.ConverterStrToInt(TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','PORTPEDIDO',''))));
      DSRestConnection1.Username := 'forcauniversal';
      DSRestConnection1.Password := 'univ#2021';
      {$IFDEF DEBUG}
        // DSRestConnection1.Port := 8085;
      {$ENDIF DEBUG}
    end;
  except
    on e: exception do begin
      raise Exception.Create('Erro ao configurar: ' + e.Message);
    end;
  end;
end;

procedure clsMetodosServer.ConfigurarPedido_Cont;
var
  ArquivoINI: TIniFile;
begin
  try
    if FileExists(fCaminhoINI + 'UniWEB.ini') then
    begin
      ArquivoINI := TIniFile.Create(fCaminhoINI + 'UniWEB.ini');
      DSRestConnection1.Host := TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','HOSTPEDIDO_CONT','')));
      DSRestConnection1.Port := clsBasica.ConverterStrToInt(TEncoding.ANSI.GetString(TNetEncoding.Base64.DecodeStringToBytes(ArquivoINI.ReadString('CLIENT','PORTPEDIDO_CONT',''))));
      DSRestConnection1.Username := 'forcauniversal';
      DSRestConnection1.Password := 'univ#2021';
      {$IFDEF DEBUG}
        // DSRestConnection1.Port := 8085;
      {$ENDIF DEBUG}
    end;
  except
    on e: exception do begin
      raise Exception.Create('Erro ao configurar: ' + e.Message);
    end;
  end;
end;

function clsMetodosServer.TestarConnect(var ErrorMsg: String): Boolean;
var
  returned: String;
begin
  Result := True;
  try
    //DSRestConnection1.Username := 'Admin';
    //DSRestConnection1.Password := 'Test';
    DSRestConnection1.TestConnection([toNoLoginPrompt]);
  except
  on e: exception do
    begin
      Result := False;
      ErrorMsg := e.Message;
    end
  end;
end;

constructor clsMetodosServer.Create(AOwner: TComponent);
begin
  FInstanceOwner := True;
  DSRestConnection1 := TDSRestConnection.Create(nil);
end;

destructor clsMetodosServer.Destroy;
begin
  FServerMethodsPrincipalClient := nil;
  FServerMethodsPrincipalClient.DisposeOf;
  inherited;
end;

function clsMetodosServer.GetServerMethodsPrincipalClient: TServerMethodsPrincipalClient;
begin
  if FServerMethodsPrincipalClient = nil then
    FServerMethodsPrincipalClient:= TServerMethodsPrincipalClient.Create(DSRestConnection1, FInstanceOwner);
  Result := FServerMethodsPrincipalClient;
end;

function clsMetodosServer.RetornarConexao: String;
begin
  Result := DSRestConnection1.Connection;
end;

end.

